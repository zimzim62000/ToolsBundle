{% block zimzim_toolsbundle_zimzimcollection_widget %}
    {% spaceless %}
        {% if prototype is defined %}
            {% set attr = attr|merge({'data-prototype': form_row(prototype) }) %}
        {% endif %}
        {{ block('zz_form_widget_compound') }}
    {% endspaceless %}
    <script>
        var numberElement = 0;
        var ul = document.querySelector('ul.container');
        var childs = ul.childNodes;
        var a = document.createElement('a');
        a.onclick = function () {
            addElement();
        };
        a.className = 'add_content small button';
        a.innerHTML = '{{ attr.dataaddname|trans({}, 'ZIMZIMCategoryProduct') }}';
        var li = document.createElement('li');
        li.className = 'text-center';
        li.appendChild(a);
        ul.appendChild(li);
        for (var i in childs) {
            var ulli = childs[i];
            if (ulli.tagName === 'LI') {
                numberElement++;
                var classname = ulli.className.split(' ');
                var liok = false;
                for (var j in classname) {
                    if (classname[j] === 'ulchildren') {
                        var liok = true;
                    }
                }
                if (liok) {
                    var divrow = createDivRow();
                    var divcolumns = createDivColumns();
                    var alink = createLink('{{ attr.datadeletename|trans({}, 'ZIMZIMCategoryProduct') }}');
                    alink.onclick = function () {
                        deleteElement(this.parentNode.parentNode.parentNode)
                    };
                    divrow.appendChild(divcolumns);
                    divcolumns.appendChild(alink);
                    ulli.appendChild(divrow);
                }
            }
        }

        function createLink(name) {
            var alink = document.createElement('a');
            alink.className = 'tiny button';
            alink.innerHTML = name;
            return alink;
        }

        function createDivColumns() {
            var divcolumns = document.createElement('div');
            divcolumns.className = 'large-12 columns text-center';
            return divcolumns
        }

        function createDivRow() {
            var divrow = document.createElement('div');
            divrow.className = 'row';
            return divrow
        }

        function deleteElement(liform) {
            ul.removeChild(liform);
        }

        function addElement() {
            collectionHolder = ul;
            var prototype = collectionHolder.getAttribute('data-prototype');
            prototype = prototype.replace(/__name__label__/g, name);
            var newForm = prototype.replace(/__name__/g, numberElement);
            var li = document.createElement('li');
            li.className = 'content th';
            var content = createHtmlElementByString(newForm);
            li.appendChild(content);
            collectionHolder.appendChild(li);
            numberElement++;
        }

        function createHtmlElementByString(htmlStr) {
            var frag = document.createDocumentFragment(),
                    temp = document.createElement('div');
            temp.innerHTML = htmlStr;
            while (temp.firstChild) {
                frag.appendChild(temp.firstChild);
            }
            return frag;
        }

    </script>
{% endblock zimzim_toolsbundle_zimzimcollection_widget %}


{% block zz_form_widget_compound %}
    {% spaceless %}
        <ul {{ block('widget_container_attributes') }}>
            {% if form.parent is empty %}
                {{ form_errors(form) }}
            {% endif %}
            {{ block('zz_form_rows') }}
            {{ form_rest(form) }}
        </ul>
    {% endspaceless %}
{% endblock zz_form_widget_compound %}

{% block zz_form_rows %}
    {% spaceless %}
        {% for child in form %}
            <li class="{{ attr.datachildclass|trans }} th">
                {{ form_widget(child) }}
            </li>
        {% endfor %}
    {% endspaceless %}
{% endblock zz_form_rows %}


{% block zimzim_toolsbundle_zimzimimage_widget %}
    {% spaceless %}
        {% set type = type|default('text') -%}
        <div class="row">
            <div class="medium-6 columns">
                <input type="{{ type }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
            </div>
            {% if form.vars.attr['url'] %}
                <div class="medium-6 columns">
                <img src="/{{ form.vars.attr['url'] }}" style="max-height:75px;"/>
                </div>{% endif %}
        </div>
    {% endspaceless %}
{% endblock zimzim_toolsbundle_zimzimimage_widget %}


{% block zimzim_toolsbundle_zimzimupload_widget %}
    {% spaceless %}
        {% set type = type|default('text') -%}
        <div class="row">
            <div class="medium-6 columns">
                <input type="{{ type }}" {{ block('widget_attributes') }} {% if value is not empty %}value="{{ value }}" {% endif %}/>
            </div>
            {% if form.vars.attr['extension'] %}
                <div class="medium-6 columns">
                    <h3>{{ form.vars.attr['extension'] }}</h3>
                </div>{% endif %}
        </div>
    {% endspaceless %}
{% endblock zimzim_toolsbundle_zimzimupload_widget %}


{% block form_errors %}
    {% spaceless %}
        {% if errors|length > 0 %}
            <small class="error">
                {% for key,error in errors %}
                    {% if key != 0 %}
                        &nbsp;|&nbsp;
                    {% endif %}
                    {{ error.message }}
                {% endfor %}
            </small>
        {% endif %}
    {% endspaceless %}
{% endblock form_errors %}


{# fix for collection and foundation no-label @todo try need rebuild that #}
{% block form_row %}
    <div class="row">
        <div class="small-12 large-12 columns">
            {% if form.vars.attr['no-label'] is defined and form.vars.label == '__name__label__' %}
            {% else %}
                {% if form.vars.attr['label-inline'] is defined %}
                    {{ form_label(form) }}
                {% else %}
                    {{ block('form_label_start') }}
                {% endif %}
            {% endif %}
            {% if(form.vars.errors|length > 0) %}
                {{ form_widget(form, {'attr': {'class' : 'error'} }) }}
            {% else %}
                {{ form_widget(form) }}
            {% endif %}
            {{ form_errors(form) }}
            {% if form.vars.attr['no-label'] is defined and form.vars.label == '__name__label__' %}
            {% else %}
                {{ block('form_label_end') }}
            {% endif %}
        </div>
    </div>
{% endblock form_row %}

{% block form_label_start %}
    {% spaceless %}
        {% if label is not sameas(false) %}
            {% if not compound %}
                {% set label_attr = label_attr|merge({'for': id}) %}
            {% endif %}
            {% if form.vars.errors|length > 0 %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' error')|trim}) %}
            {% endif %}
            {% if required %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
            {% endif %}
            {% if label is empty %}
                {% set label = name|humanize %}
            {% endif %}
            <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
            {{ label|trans({}, translation_domain) }}
            {% if form.vars.required %}
                <i class="star"></i>
            {% endif %}
        {% endif %}
    {% endspaceless %}
{% endblock form_label_start %}

{% block form_label_end %}
    {% spaceless %}
        </label>
    {% endspaceless %}
{% endblock form_label_end %}


{% block button_row %}
    {% spaceless %}
        <div class="row">
            <div class="small-12 large-12 columns text-center">
                {{ form_widget(form) }}
            </div>
        </div>
    {% endspaceless %}
{% endblock button_row %}

{% block form_end %}
    {% spaceless %}
        {% if not render_rest is defined or render_rest %}
            {{ form_rest(form) }}
        {% endif %}
        {% if form.vars.action|preg_match('/delete/i') == false %}
            <div class="row">
                <div class="large-12 columns text-right">
                    <small class="form_info"><i class="star"></i> {{ 'form.fieldrequired'|trans }}</small>
                </div>
            </div>
        {% endif %}
        </form>
    {% endspaceless %}
{% endblock form_end %}

{% block form_label %}
    {% spaceless %}
        {% if label is not sameas(false) %}
            {% if not compound %}
                {% set label_attr = label_attr|merge({'for': id}) %}
            {% endif %}
            {% if required %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' required')|trim}) %}
            {% endif %}
            {% if label is empty %}
                {% set label = name|humanize %}
            {% endif %}
            {% if form.vars.errors|length > 0 %}
                {% set label_attr = label_attr|merge({'class': (label_attr.class|default('') ~ ' error')|trim}) %}
            {% endif %}
            <label{% for attrname, attrvalue in label_attr %} {{ attrname }}="{{ attrvalue }}"{% endfor %}>
                {{ label|trans({}, translation_domain) }}
                {% if form.vars.required %}
                    <i class="star"></i>
                {% endif %}
            </label>
        {% endif %}
    {% endspaceless %}
{% endblock form_label %}

